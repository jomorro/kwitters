{"version":3,"sources":["Actions/actions.js","components/Message.js","components/MessagesList.js","components/ComposeMessage.js","components/Feed.js","components/ProfileMessage.js","components/ProfileMessageList.js","components/Profile.js","components/Login.js","components/DeleteUser.js","components/EditProfile.js","components/Register.js","components/Logout.js","components/NavBar.js","components/App.js","serviceWorker.js","Reducers/reducer.js","index.js","Images/favicon.ico"],"names":["GET_MESSAGES","GET_MESSAGES_SUCCESS","GET_MESSAGES_FAILURE","kwitterURL","login","loginData","dispatch","type","fetch","concat","method","headers","Content-Type","body","JSON","stringify","then","response","ok","json","err","data","payload","token","id","result","push","getUserInfo","catch","userId","user","downloadUserImage","getAnyUser","updateMessageById","messageId","getState","res","message","getMessageById","messageIndex","messages","findIndex","index","toggleLike","likeId","find","loggedInUser","like","likes","authentication","Authorization","addLike","getMessages","statusText","forEach","users","setTimeout","console","log","loggedInUserId","blob","window","URL","createObjectURL","userImage","error","Message","react_default","a","createElement","react","Card","color","animation","Icon","Inverted","vertical","width","fluid","Content","Header","this","props","text","Description","username","Divider","extra","onClick","isLiked","numOfLikes","Component","MessagesList","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this","Fragment","Grid","container","stackable","Row","Column","map","components_Message","length","connect","state","objectSpread","ComposeMessage","handleMessageSubmit","event","setState","target","handleComposeMessageProfileEnter","composeMessage","handleComposeMessageProfileButton","displayFeed","Form","style","display","justifyContent","TextArea","placeholder","onChange","onKeyPress","maxLength","maxWidth","Button","padding","React","userID","Feed","Image","src","picture","size","centered","components_ComposeMessage","textAlign","components_MessagesList","ProfileMessage","icon","ProfileMessagesList","components_ProfileMessage","Profile","handleUploadImage","preventDefault","formData","FormData","uploadUserImage","as","Menu","wrapped","userImageSrc","Segment","inverted","Meta","displayName","about","Link","to","floated","basic","ProfileMessageList","verticalAlign","Login","password","handleUsernameChange","handlePasswordChange","handleLogin","height","onSubmit","stacked","Field","label","required","control","Input","autoFocus","Group","positive","Or","loginResult","DeleteUser","modalOpen","handleOpen","handleClose","handleDeleteUser","deleteUser","Modal","trigger","name","open","onClose","Actions","EditProfile","handleChange","e","_ref","defineProperty","handleSubmit","updateUser","Subheader","image","title","components_DeleteUser","userData","userImageTimestamp","Date","now","Register","handleDisplayNameChange","handleRegister","register","registerResult","registerData","history","Logout","handleLogout","logout","active","position","Item","Dimmer","page","Navbar","activeItem","handleItemClick","Container","pointing","secondary","header","components_Logout","App","Switch","Route","exact","path","component","NavBar","Boolean","location","hostname","match","initialState","loginAuthSuccess","createdAt","updatedAt","kwitterReducer","undefined","action","newMessages","slice","splice","createBrowserHistory","basename","process","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","connectRouter","applyMiddleware","routerMiddleware","thunk","ReactDOM","render","es","lib","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.35cf0915.chunk.js","sourcesContent":["import { push } from \"connected-react-router\";\nexport const ADD_LIKE = \"ADD_LIKE\";\nexport const ADD_LIKE_SUCCESS = \"ADD_LIKE_SUCCESS\";\nexport const CREATE_MESSAGE = \"CREATE_MESSAGE\";\nexport const CREATE_MESSAGE_SUCCESS = \"CREATE_MESSAGE_SUCCESS\";\nexport const DELETE_USER = \"DELETE_USER\";\nexport const DELETE_USER_SUCCESS = \"DELETE_USER_SUCCESS\";\nexport const DELETE_USER_FAILURE = \"DELETE_USER_FAILURE\";\nexport const GET_ANY_USER = \"GET_ANY_USER\";\nexport const GET_ANY_USER_SUCCESS = \"GET_ANY_USER_SUCCESS\";\nexport const GET_ANY_USER_FAILURE = \"GET_ANY_USER_FAILURE\";\nexport const GET_MESSAGE_BY_ID = \"GET_MESSAGE_BY_ID\";\nexport const GET_MESSAGE_BY_ID_SUCCESS = \"GET_MESSAGE_BY_ID_SUCCESS\";\nexport const GET_MESSAGES = \"GET_MESSAGES\";\nexport const GET_MESSAGES_SUCCESS = \"GET_MESSAGES_SUCCESS\";\nexport const GET_MESSAGES_FAILURE = \"GET_MESSAGES_FAILURE\";\nexport const GET_USER = \"GET_USER\";\nexport const GET_USER_SUCCESS = \"GET_USER_SUCCESS\";\nexport const GET_USER_FAILURE = \"GET_USER_FAILURE\";\nexport const LIKE_MESSAGE = \"LIKE_MESSAGE\";\nexport const LOGOUT = \"LOGOUT\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\nexport const LOGIN = \"LOGIN\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const REGISTER = \"REGISTER\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAILURE = \"REGISTER_FAILURE\";\nexport const REMOVE_LIKE = \"REMOVE_LIKE\";\nexport const REMOVE_LIKE_SUCCESS = \"REMOVE_LIKE_SUCCESS\";\nexport const UPDATE_MESSAGE_BY_ID_SUCCESS = \"UPDATE_MESSAGE_BY_ID_SUCCESS\";\nexport const UPDATE_MESSAGE_BY_ID_FAIL = \"UPDATE_MESSAGE_BY_ID_FAIL\";\nexport const UPDATE_USER = \"UPDATE_USER\";\nexport const UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_FAILURE = \"UPDATE_USER_FAILURE\";\n\n\nexport const UPLOAD_USER_IMAGE = \"UPLOAD_USER_IMAGE\";\nexport const UPLOAD_USER_IMAGE_SUCCESS = \"UPLOAD_USER_IMAGE_SUCCESS\";\nexport const UPLOAD_USER_IMAGE_FAIL = \"UPLOAD_USER_IMAGE_FAIL\";\n\nexport const DOWNLOAD_USER_IMAGE = \"DOWNLOAD_USER_IMAGE\";\nexport const DOWNLOAD_USER_IMAGE_SUCCESS = \"DOWNLOAD_USER_IMAGE_SUCCESS\";\nexport const DOWNLOAD_USER_IMAGE_FAIL = \"DOWNLOAD_USER_IMAGE_FAIL\";\n\n\n\n\nconst kwitterURL = \"https://kwitter-api.herokuapp.com\";\n\nexport const login = loginData => dispatch => {\n  dispatch({ type: LOGIN });\n  fetch(`${kwitterURL}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(loginData)\n  })\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: {\n          token: data.token,\n          id: data.id\n        },\n        login: data,\n        result: \"Successful login!\"\n      });\n      dispatch(push(\"/profile\"));\n      dispatch(getUserInfo(data.id));\n    })\n    .catch(err => {\n      dispatch({\n        type: LOGIN_FAILURE,\n        result:\n          \"Failed to login. Please enter a valid username and/or password.\"\n      });\n    });\n};\n\nexport const getUserInfo = userId => dispatch => {\n  dispatch({ type: GET_USER });\n  fetch(`${kwitterURL}/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: GET_USER_SUCCESS, data: data.user });\n    })\n    .then(dispatch(downloadUserImage()))\n    .catch(err => {\n      dispatch({ type: GET_USER_FAILURE, err });\n    });\n};\n\nexport const register = (registerData, history) => dispatch => {\n  dispatch({\n    type: REGISTER\n  });\n  \n  fetch(`${kwitterURL}/auth/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(\n     \n      registerData\n    )\n  })\n    // hydrates body; always need for api b/c always returns json; if not, it would  be parsed diff\n    // .then(response => response.json()) // if immediately hydrate, it always assumes its correct, so ave to check\n    .then(response => {\n      // response.ok means it's in the 200 range;\n      if (!response.ok) {\n        // throw from here, it goes to catch\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json(); \n    })\n    .then(data => {\n      // data looks like w/e we got for resposne in api/psotman\n      // success already has values in state\n      // no setstate cause not in comp\n      // do dispatch on success\n      dispatch({\n        type: REGISTER_SUCCESS,\n        register: data,\n        result: \"Successfully Registered!\" \n      });\n      dispatch(push(\"/profile\"));\n      dispatch(\n        login({\n          username: registerData.username,\n          password: registerData.password\n        })\n      ); \n    })\n    .catch(err => {\n      // dispatch here on fail\n      dispatch({\n        type: REGISTER_FAILURE,\n        result: `Failed to register. Please enter a unique username, and make sure all fields have 3-20 characters.`\n      });\n    });\n};\n\nexport const logout = () => dispatch => {\n  fetch(`${kwitterURL}/auth/logout`)\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: LOGOUT_SUCCESS });\n      dispatch(push(\"/\"));\n    })\n    .catch(err => {\n      dispatch({ type: LOGOUT_FAILURE, err });\n    });\n};\n\nexport const deleteUser = token => dispatch => {\n  dispatch({ type: DELETE_USER });\n  fetch(`${kwitterURL}/users`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  })\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      console.log(data);\n      dispatch({ type: DELETE_USER_SUCCESS });\n      dispatch(push(\"/register\"));\n    })\n    .catch(err => {\n      dispatch({ type: DELETE_USER_FAILURE, err });\n    });\n};\n\nexport const updateUser = userData => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  if (userData.displayName === \"\") {\n    delete userData.displayName;\n  }\n  if (userData.password === \"\") {\n    delete userData.password;\n  }\n  dispatch({ type: UPDATE_USER });\n  fetch(`${kwitterURL}/users`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(userData)\n  })\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: UPDATE_USER_SUCCESS, data: data.user });\n      dispatch(push(\"/profile\"));\n    })\n    .catch(err => {\n      dispatch({ type: UPDATE_USER_FAILURE, err });\n    });\n};\n\nexport const getAnyUser = userId => dispatch => {\n  dispatch({ type: GET_ANY_USER });\n  fetch(`${kwitterURL}/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: GET_ANY_USER_SUCCESS, data: data.user });\n    })\n    .catch(err => {\n      dispatch({ type: GET_ANY_USER_FAILURE, err });\n    });\n};\n\nexport const getMessageById = messageId => dispatch => {\n  dispatch({ type: GET_MESSAGE_BY_ID });\n  return fetch(`${kwitterURL}/messages/${messageId}`)\n    .then(res => res.json())\n    .then(data => {\n      dispatch({ type: GET_MESSAGE_BY_ID_SUCCESS });\n      return data.message;\n    });\n};\n\nexport const updateMessageById = messageId => (dispatch, getState) => {\n  dispatch(getMessageById(messageId)).then(message => {\n    const messages = getState().messages;\n    const messageIndex = messages.findIndex(\n      message => message.id === messageId\n    );\n    if (messageIndex !== -1) {\n      dispatch({\n        type: UPDATE_MESSAGE_BY_ID_SUCCESS,\n        id: messageId,\n        index: messageIndex,\n        message\n      });\n    } else {\n      dispatch({ type: UPDATE_MESSAGE_BY_ID_FAIL, id: messageId });\n    }\n  });\n};\n\nexport const composeMessage = text => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({ type: CREATE_MESSAGE });\n  return fetch(`${kwitterURL}/messages`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ text })\n  })\n    .then(res => res.json())\n    .then(data => {\n      dispatch({\n        type: CREATE_MESSAGE_SUCCESS\n      });\n      const userId = getState().authentication.id;\n      dispatch(getUserInfo(userId));\n    });\n};\n\nexport const removeLike = likeId => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({ type: REMOVE_LIKE });\n  return fetch(`${kwitterURL}/likes/${likeId}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: \"Bearer \" + token\n    }\n  })\n    .then(res => res.json())\n    .then(data => {\n      dispatch({\n        type: REMOVE_LIKE_SUCCESS\n      });\n    });\n};\nexport const addLike = messageId => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({ type: ADD_LIKE });\n  return fetch(`${kwitterURL}/likes`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    },\n    body: JSON.stringify({ messageId })\n  })\n    .then(res => res.json())\n    .then(data => {\n      dispatch({ type: ADD_LIKE_SUCCESS });\n    });\n};\nexport const toggleLike = messageId => (dispatch, getState) => {\n  const message = getState().messages.find(message => message.id === messageId);\n  const userId = getState().loggedInUser.id;\n\n  const like = message.likes.find(like => like.userId === userId);\n\n  if (like) {\n    dispatch(removeLike(like.id)).then(() => {\n      dispatch(updateMessageById(messageId));\n    });\n  } else {\n    dispatch(addLike(messageId)).then(() => {\n      dispatch(updateMessageById(messageId));\n    });\n  }\n};\nexport const likedMessageSuccess = likeObj => {\n  return {\n    type: LIKE_MESSAGE,\n    payload: likeObj\n  };\n};\nexport const likeMessage = (userId, messageId, token) => dispatch => {\n  const header = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      userId: userId,\n      messageId: messageId\n    })\n  };\n  return fetch(`${kwitterURL}/messages`, header)\n    .then(response => response.json())\n    .then(likeObj => {\n      dispatch(likedMessageSuccess(likeObj));\n      return likeObj.like.id;\n    });\n};\n\nexport function getMessages() {\n  return function(dispatch, getState) {\n    dispatch({ type: GET_MESSAGES });\n    fetch(`${kwitterURL}/messages`)\n      .then(res => {\n        if (res.statusText === \"OK\") {\n          return res.json(); \n        }\n      })\n      .then(data => {\n        dispatch({\n          type: GET_MESSAGES_SUCCESS,\n          payload: {\n            messages: data.messages\n          }\n        });\n        data.messages.forEach(message => {\n          if (getState().users[message.userId]) {\n            return null;\n          } else {\n            dispatch(getAnyUser(message.userId));\n          }\n        });\n        setTimeout(() => dispatch(getMessages()), 5000); \n      })\n      .catch(err => {\n        console.log(err);\n        dispatch({ type: GET_MESSAGES_FAILURE });\n      });\n  };\n}\n\n\nexport const uploadUserImage = formData => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({\n    type: UPLOAD_USER_IMAGE\n  });\n\n  fetch(`${kwitterURL}/users/picture`, {\n    method: \"PUT\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    },\n    body: formData\n  }).then(res => {\n    if (res.ok) {\n      dispatch({\n        type: UPLOAD_USER_IMAGE_SUCCESS,\n        userImageTimestamp: Date.now()\n      });\n      dispatch(downloadUserImage());\n      return;\n    }\n\n    return dispatch({\n      type: UPLOAD_USER_IMAGE_FAIL\n    });\n  });\n};\n\nexport const downloadUserImage = () => (dispatch, getState) => {\n  const loggedInUserId = getState().authentication.id\n  dispatch({ type: DOWNLOAD_USER_IMAGE })\n  return fetch(`${kwitterURL}/users/${loggedInUserId}/picture`)\n    .then(res => {\n      if (res.ok) {\n        return res.blob().then(result => window.URL.createObjectURL(result));\n      }\n      return \"https://react.semantic-ui.com/images/avatar/large/rachel.png\";\n    })\n    .then(result => {\n      dispatch({\n        type: DOWNLOAD_USER_IMAGE_SUCCESS,\n        userImage: result\n      });\n    })\n    .catch(err => {\n      console.error(err);\n      dispatch({\n        type: DOWNLOAD_USER_IMAGE_FAIL\n      });\n    });\n};\n","import React, { Component, Fragment } from \"react\";\nimport { Divider, Card } from \"semantic-ui-react\";\n\nclass Message extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Card\n          color=\"green\"\n          animation=\"overlay\"\n          Icon=\"labeled\"\n          Inverted\n          vertical\n          width=\"thin\"\n          fluid\n        >\n          <Card.Content>\n            <Card.Header>{this.props.text}</Card.Header>\n            {/* //   place props in styling, from fragment section. */}\n            <Card.Description>\n              Kweeted by {this.props.username}\n            </Card.Description>\n            <Divider />\n            <Card.Content extra>\n              <button onClick={this.props.toggleLike}>\n                {this.props.isLiked ? \"Unlike\" : \"Like\"}\n              </button>\n              <p>Likes: {this.props.numOfLikes}</p>\n            </Card.Content>\n          </Card.Content>\n        </Card>\n      </Fragment>\n    );\n  }\n}\nexport default Message;\n","import React, { Component } from \"react\";\nimport { getMessages, toggleLike } from \"../Actions/actions\";\nimport { connect } from \"react-redux\";\nimport Message from \"./Message\";\nimport { Grid } from \"semantic-ui-react\";\n\nexport class MessagesList extends Component {\n  componentDidMount() {\n    this.props.getMessages();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Grid container stackable>\n          <Grid.Row>\n            <Grid.Column>\n              {this.props.messages.map(message => (\n                <Message\n                  key={message.id}\n                  text={message.text}\n                  username={message.username}\n                  toggleLike={() => this.props.toggleLike(message.id)}\n                  numOfLikes={message.likes.length}\n                  isLiked={message.isLiked}\n                />\n              ))}\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.messages.map(message => {\n      const username =\n        (state.users[message.userId] && state.users[message.userId].username) ||\n        \"unknown\";\n      const like = message.likes.find(\n        like => like.userId === state.authentication.id\n      );\n      if (like) {\n        return {\n          ...message,\n          username,\n          isLiked: true\n        };\n      } else {\n        return {\n          ...message,\n          username,\n          isLiked: false\n        };\n      }\n    })\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getMessages: () => {\n      dispatch(getMessages());\n    },\n    toggleLike: messageId => dispatch(toggleLike(messageId))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MessagesList);\n\n\n","import React, { Fragment } from \"react\";\nimport { Button, Form, TextArea } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { composeMessage } from \"../Actions/actions\";\n\nclass ComposeMessage extends React.Component {\n  state = {\n    text: \"\"\n  };\n\n  handleMessageSubmit = event => {\n    this.setState({ text: event.target.value });\n  };\n\n  handleComposeMessageProfileEnter = event => {\n    if (event.key === \"Enter\") {\n      this.props.composeMessage(this.state.text);\n      this.setState({ text: \"\" });\n    }\n  };\n\n  handleComposeMessageProfileButton = event => {\n    this.props.composeMessage(this.state.text);\n    this.setState({ text: \"\" });\n  };\n\n  displayFeed = () => {\n    return (\n      <Form\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\"\n        }}\n      >\n        <TextArea\n          placeholder=\"What would you like to Kweet about today?\"\n          onChange={this.handleMessageSubmit}\n          value={this.state.text}\n          onKeyPress={this.handleComposeMessageProfileEnter}\n          maxLength=\"255\"\n          style={{ maxWidth: \"36em\" }}\n        />\n        <Button\n          style={{\n            color: \"rgb(45,45,45)\",\n            padding: \"5px\"\n          }}\n          onClick={this.handleComposeMessageProfileButton}\n        >\n          Kweet\n        </Button>\n      </Form>\n    );\n  };\n\n  render() {\n    return <Fragment>{this.displayFeed()}</Fragment>;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userID: state.userID\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    composeMessage: text => {\n      dispatch(composeMessage(text));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ComposeMessage);\n","import React, { Component } from \"react\";\nimport MessagesList from \"./MessagesList\";\nimport ComposeMessage from \"./ComposeMessage\";\nimport picture from \"../Images/favicon.ico\";\nimport {Image} from \"semantic-ui-react\";\n\nclass Feed extends Component {\n  render() {\n    return (\n      \n      <React.Fragment>\n        <Image src={picture} size=\"medium\" centered />\n         <ComposeMessage />\n        <h1 style={{ textAlign: \"center\", color: \"green\" }}>Feed</h1>\n        <MessagesList />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Feed;\n","import React, { Component, Fragment } from \"react\";\nimport { Divider, Card } from \"semantic-ui-react\";\n\nclass ProfileMessage extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Card\n          color=\"green\"\n          animation=\"overlay\"\n          icon=\"labeled\"\n          width=\"thin\"\n          fluid\n        >\n          <Card.Content>\n            <Card.Header>{this.props.text}</Card.Header>\n            {/* //   place props in styling, from fragment section. */}\n            <Card.Description>\n              Kweeted by {this.props.username}\n            </Card.Description>\n            <Divider />\n            <Card.Content extra>\n              <p>Likes: {this.props.numOfLikes}</p>\n            </Card.Content>\n          </Card.Content>\n        </Card>\n      </Fragment>\n    );\n  }\n}\nexport default ProfileMessage;\n","import React, { Component } from \"react\";\nimport { getMessages, toggleLike } from \"../Actions/actions\";\nimport { connect } from \"react-redux\";\nimport ProfileMessage from \"./ProfileMessage\";\nimport { Grid } from \"semantic-ui-react\";\n\nexport class ProfileMessagesList extends Component {\n  componentDidMount() {\n    this.props.getMessages();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Grid container stackable>\n          <Grid.Row>\n            <Grid.Column>\n              {this.props.messages.map(message => (\n                <ProfileMessage\n                  key={message.id}\n                  text={message.text}\n                  username={message.username}\n                  toggleLike={() => this.props.toggleLike(message.id)}\n                  numOfLikes={message.likes.length}\n                  isLiked={message.isLiked}\n                />\n              ))}\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.messages.map(message => {\n      const username =\n        (state.users[message.userId] && state.users[message.userId].username) ||\n        \"unknown\";\n      const like = message.likes.find(\n        like => like.userId === state.authentication.id\n      );\n      if (like) {\n        return {\n          ...message,\n          username,\n          isLiked: true\n        };\n      } else {\n        return {\n          ...message,\n          username,\n          isLiked: false\n        };\n      }\n    })\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getMessages: () => {\n      dispatch(getMessages());\n    },\n    toggleLike: messageId => dispatch(toggleLike(messageId))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ProfileMessagesList);\n\n\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Card,\n  Divider,\n  Grid,\n  Header,\n  Image,\n  Menu,\n  Segment\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n// import UserMessages from \"./UserMessages\";\nimport picture from \"../Images/favicon.ico\";\nimport ProfileMessageList from \"./ProfileMessageList\";\n\n\nclass Profile extends Component {\n\n  componentDidMount() {\n    // this.props.getUsers();\n    // this.props.getLoggedInUser();\n  }\n  handleUploadImage = event => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    this.props.uploadUserImage(formData);\n  };\n\n\n  render() {\n    return (\n      <Grid container stackable>\n        <Grid.Row>\n          <Grid.Column width={6}>\n            <Card\n              color=\"black\"\n              as={Menu}\n              animation=\"overlay\"\n              icon=\"labeled\"\n              width=\"thin\"\n              fluid\n            >\n              <Card.Content>\n              <Image wrapped size=\"medium\" src={this.props.userImageSrc} />\n                <Segment style={{ padding: \"1em 0em\" }} inverted color=\"blue\">\n                  <Card.Header as=\"h2\" textAlign=\"center\">\n                    {this.props.username}\n                  </Card.Header>\n                </Segment>\n                <Card.Description>\n                  <Card.Meta as=\"h2\">Display Name:</Card.Meta>\n                  {this.props.displayName}\n                </Card.Description>\n                <Divider />\n                <Card.Description>\n                  <Card.Meta as=\"h2\">About Me:</Card.Meta>\n                  {this.props.about}\n                </Card.Description>\n              </Card.Content>\n              <Card.Content extra>\n                <Link to=\"/editprofile\">\n                  <Button size=\"large\" color=\"yellow\" fluid>\n                    Edit Profile\n                  </Button>\n                </Link>\n                {/* <Image wrapped size=\"medium\" src={this.props.userImageSrc} /> */}\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n          <Grid.Column floated=\"right\" width={10}>\n            <Segment basic>\n              <Header as=\"h1\" textAlign=\"center\" color=\"blue\">\n                My Messages\n              </Header>\n              <Divider/>\n              <ProfileMessageList />\n              <br></br>\n              <Image src={picture} size=\"medium\" centered />\n            </Segment>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n\nconst profilePicture = () => (\n  <div>\n    <Image size=\"tiny\" verticalAlign=\"top\" /> <span>Top Aligned</span>\n    <Divider />\n  </div>\n);\n\nconst mapStateToProps = state => {\n  return {\n    displayName: state.loggedInUser.displayName,\n    about: state.loggedInUser.about,\n    username: state.loggedInUser.username,\n    userImageSrc: state.loggedInUser.userImage\n  };\n};\nexport default connect(\n  mapStateToProps,\n  profilePicture,\n)(Profile);","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../Actions/actions.js\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Image,\n  Input,\n  Segment\n} from \"semantic-ui-react\";\nimport picture from \"../Images/favicon.ico\";\nclass Login extends Component {\n  state = {\n    username: \"\",\n    password: \"\"\n  };\n\n  handleUsernameChange = event => {\n    this.setState({\n      username: event.target.value\n    });\n  };\n  handlePasswordChange = event => {\n    this.setState({\n      password: event.target.value\n    });\n  };\n  handleLogin = event => {\n    this.props.login({\n      username: this.state.username,\n      password: this.state.password\n    });\n  };\n\n  render() {\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"100%\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <div />\n          <Header as=\"h1\" color=\"blue\" textAlign=\"center\">\n            Welcome to Kwitter!\n          </Header>\n          <Image src={picture} size=\"medium\" centered />\n          <Header as=\"h2\" color=\"blue\" textAlign=\"center\">\n            Login\n          </Header>\n          <Form onSubmit={this.handleLogin} size=\"large\">\n            <Segment stacked color=\"grey\">\n              <Form.Field\n                label=\"Username:\"\n                required\n                placeholder=\"Username\"\n                type=\"text\"\n                control={Input}\n                autoFocus\n                onChange={this.handleUsernameChange}\n              />\n              <Form.Field\n                label=\"Password:\"\n                required\n                placeholder=\"Password\"\n                type=\"password\"\n                control={Input}\n                onChange={this.handlePasswordChange}\n              />\n              <Button.Group>\n                <Button\n                  type=\"submit\"\n                  positive\n                  size=\"large\"\n                  to=\"/profile\"\n                >\n                  Login to Your Account!\n                </Button>\n                <Button.Or />\n                <Link to=\"/register\">\n                  <Button size=\"large\" color=\"yellow\">\n                    Don't Have an Account? Register Here!\n                  </Button>\n                </Link>\n              </Button.Group>\n              <div>{this.props.result}</div>\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    result: state.loginResult\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    login: loginData => dispatch(login(loginData))\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Login);\n","import React, { Component } from \"react\";\nimport { deleteUser } from \"../Actions/actions\";\nimport { connect } from \"react-redux\";\nimport { Button, Divider, Header, Icon, Modal } from \"semantic-ui-react\";\n\nclass DeleteUser extends Component {\n  state = { modalOpen: false };\n\n  handleOpen = () => this.setState({ modalOpen: true });\n  handleClose = () => this.setState({ modalOpen: false });\n  handleDeleteUser = event => {\n    this.props.deleteUser(this.props.token);\n    this.setState({ modalOpen: false });\n  };\n\n  render() {\n    return (\n      <Modal\n        trigger={\n          <Button onClick={this.handleOpen} color=\"red\">\n            <Icon name=\"hand peace\" />\n            \n            Delete Account\n          </Button>\n        }\n        open={this.state.modalOpen}\n        onClose={this.handleClose}\n        size=\"tiny\"\n      >\n        <Header\n          textAlign=\"center\"\n          verticalAlign=\"middle\"\n          icon=\"hand peace\"\n          as=\"h1\"\n        >\n          Are you want to delete your account?\n          <Divider />\n          <Modal.Actions>\n            <Button.Group>\n              <Button color=\"green\" onClick={this.handleDeleteUser}>\n                <Icon name=\"trash\" /> Trash It!\n              </Button>\n              <Button.Or />\n              <Button color=\"red\" onClick={this.handleClose}>\n                <Icon name=\"smile\" /> No thanks!\n              </Button>\n            </Button.Group>\n          </Modal.Actions>\n        </Header>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.authentication.token\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteUser: token => dispatch(deleteUser(token))\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DeleteUser);\n","import React, { Component } from \"react\";\nimport {\n  Card,\n  Image,\n  Modal,\n  Form,\n  Grid,\n  Header,\n  Icon,\n  Segment\n} from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { updateUser, uploadUserImage } from \"../Actions/actions.js\";\nimport DeleteUser from \"./DeleteUser\";\n\nclass EditProfile extends Component {\n  state = { displayName: \"\", password: \"\", about: \"\" };\n\n  handleChange = (e, { value }) => this.setState({ [e.target.name]: value });\n  handleSubmit = e => {\n    e.preventDefault()\n    this.props.updateUser({ ...this.state })\n    \n    const formData = new FormData(e.target)\n    this.props.uploadUserImage(formData)\n  }\n\n  render() {\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"100%\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 600 }}>\n          <Header as=\"h2\" color=\"blue\" icon>\n            Edit your profile!\n            <Header.Subheader>\n              Here you can change your display name, password, or update your about info.\n            </Header.Subheader>\n          </Header>\n          \n          <Card>\n              <Modal.Content image>\n                  <Image wrapped size=\"medium\" src={this.props.userImageSrc} />\n              </Modal.Content>\n\n              \n          <Form onSubmit={this.handleSubmit} size=\"large\">\n            <Segment stacked color=\"grey\">\n              <Form.Input\n                name=\"picture\"\n                type=\"file\"\n                title=\"picture\"\n              ></Form.Input>\n              <Form.Input\n                onChange={this.handleChange}\n                name=\"displayName\"\n                fluid\n                label=\"Display Name\"\n                placeholder=\"Display Name\"\n              />\n              <Form.Input\n                onChange={this.handleChange}\n                name=\"password\"\n                fluid\n                label=\"Password\"\n                placeholder=\"Password\"\n              />\n              <Form.TextArea\n                onChange={this.handleChange}\n                name=\"about\"\n                label=\"About\"\n                placeholder=\"Tell us more about you...\"\n              />\n\n              <Form.Button color=\"green\" type=\"submit\">\n                <Icon name=\"checkmark\" /> Confirm Changes\n              </Form.Button>\n              <DeleteUser />\n            </Segment>\n          </Form>\n          </Card>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateUser: userData => dispatch(updateUser(userData)),\n    uploadUserImage: formData => dispatch(uploadUserImage(formData))\n  };\n};\n\nconst mapStateToProps = state => {\n  \n  return {\n    token: state.authentication.token,\n    userImageSrc: state.loggedInUser.userImage\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(EditProfile);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { register } from \"../Actions/actions.js\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Image,\n  Input,\n  Segment\n} from \"semantic-ui-react\";\nimport picture from \"../Images/favicon.ico\";\n\nclass Register extends Component {\n  state = {\n    username: \"\",\n    displayName: \"\",\n    password: \"\"\n    // result: \"\" // say if failed or success; dont need b/c inside action\n  };\n\n  // function will go on dom, so need to bind correctly\n  handleUsernameChange = event => {\n    this.setState({\n      username: event.target.value\n    });\n  };\n  handleDisplayNameChange = event => {\n    this.setState({\n      displayName: event.target.value\n    });\n  };\n  handlePasswordChange = event => {\n    this.setState({\n      password: event.target.value\n    });\n  };\n  // if has same username, api will send an error; get list of all usernames and check forrepeats and do onBlur (when exiting that inout box; might need another endpoint to send username)\n  // need to think about success and error cases\n  // the fetch will have to be in redux when get there\n  // register would be connected through action creator b/c the event isnt being used in handler, so this code doesnt have to be connected inside this comp and can move in avtion creator\n  handleRegister = event => {\n    // translate state value to get this then put elsewhere\n    this.props.register({\n      username: this.state.username,\n      displayName: this.state.displayName,\n      password: this.state.password\n    });\n  };\n\n  render() {\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"100%\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <div />\n          <Header as=\"h1\" color=\"blue\" textAlign=\"center\">\n            Welcome to Kwitter!\n          </Header>\n          <Image src={picture} size=\"small\" centered />\n          <Header as=\"h2\" color=\"grey\" textAlign=\"center\">\n            Register a New Account\n          </Header>\n          <Form size=\"large\">\n            <Segment stacked color=\"grey\">\n              <Form.Field label=\"ALL FIELDS MUST HAVE 3-20 CHARACTERS\" />\n              <Form.Field\n                label=\"Username:\"\n                required\n                placeholder=\"Username\"\n                type=\"text\"\n                control={Input}\n                autoFocus\n                onChange={this.handleUsernameChange}\n              />\n              <Form.Field\n                label=\"Display Name:\"\n                required\n                placeholder=\"Display Name\"\n                type=\"text\"\n                control={Input}\n                onChange={this.handleDisplayNameChange}\n              />\n              <Form.Field\n                label=\"Password:\"\n                required\n                placeholder=\"Password\"\n                type=\"password\"\n                control={Input}\n                onChange={this.handlePasswordChange}\n              />\n              <Button.Group>\n                <Button positive size=\"large\" onClick={this.handleRegister}>\n                  Create Your New Account!\n                </Button>\n                <Button.Or />\n                <Link to=\"/\">\n                  <Button size=\"large\" color=\"yellow\">\n                    Already Have an Account? Login Here!\n                  </Button>\n                </Link>\n              </Button.Group>\n              <div>{this.props.result}</div>\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\n// listen to state value to rerender when changes occur\nconst mapStateToProps = state => {\n  return {\n    result: state.registerResult\n  };\n};\n// this gets into dispatch and returns props\nconst mapDispatchToProps = dispatch => {\n  return {\n    // neesd all state stuff to create action thing\n    // register: (username, displayName, password) => dispatch(register(username, displayName, password))\n    register: registerData => dispatch(register(registerData))\n  };\n};\n// export default Register;\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Register);\n\n\n","import React, { Component } from \"react\";\nimport { Button, Dimmer, Divider, Header, Icon, Menu } from \"semantic-ui-react\";\nimport { logout } from \"../Actions/actions\";\nimport { connect } from \"react-redux\";\n\nclass Logout extends Component {\n  state = {};\n\n  handleLogout = event => {\n    this.props.logout();\n    this.setState({ active: false });\n  };\n\n  handleOpen = () => this.setState({ active: true });\n\n  render() {\n    const { active } = this.state;\n    return (\n      <Menu.Menu position=\"right\">\n        <Menu.Item name=\"logout\" onClick={this.handleOpen} />\n        <Dimmer active={active} page>\n          <Header as=\"h2\" icon inverted>\n            <Icon name=\"frown outline\" />\n            <Menu.Item>Thanks for using KWITTER! Kweet soon!</Menu.Item>\n            <Divider />\n            <Button\n              name=\"logout\"\n              onClick={this.handleLogout}\n              size=\"massive\"\n              color=\"yellow\"\n            >\n              Logout\n            </Button>\n          </Header>\n        </Dimmer>\n      </Menu.Menu>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logout: () => dispatch(logout())\n  };\n};\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Logout);\n","import React, { Component } from \"react\";\nimport Logout from \"./Logout\";\nimport { Container, Menu } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Navbar extends Component {\n  state = { activeItem: \"profile\" };\n\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\n\n  render() {\n    const { activeItem } = this.state;\n\n    return (\n      <Container>\n        <Menu pointing secondary color=\"blue\">\n          <Menu.Item header>Kwitter</Menu.Item>\n          <Menu.Item\n            as={Link}\n            name=\"feed\"\n            active={activeItem === \"feed\"}\n            onClick={this.handleItemClick}\n            to=\"/feed\"\n          />\n          <Menu.Item\n            name=\"profile\"\n            as={Link}\n            active={activeItem === \"profile\"}\n            onClick={this.handleItemClick}\n            to=\"/profile\"\n          />\n          <Menu.Menu position=\"right\">\n            <Logout />\n          </Menu.Menu>\n        </Menu>\n        <div />\n      </Container>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Feed from \"./Feed\";\nimport Profile from \"./Profile\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport EditProfile from \"./EditProfile\";\nimport Register from \"./Register\";\nimport NavBar from \"./NavBar\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Switch>\n          {/* this is saying that on these paths, no compoennt/no navbar; the * means evrything else shwos navbar */}\n          <Route exact path=\"/editprofile\" component={NavBar} />\n          <Route exact path=\"/feed\" component={NavBar} />\n          <Route exact path=\"/profile\" component={NavBar} />\n          <Route exact path=\"/\" component={null} />\n          <Route exact path=\"/register\" component={null} />\n          {/* <Route exact path=\"*\" component={null} /> */}\n        </Switch>\n        {/* <MessagesList /> */}\n        <Switch>\n          <Route exact path=\"/feed\" component={Feed} />\n          <Route exact path=\"/profile\" component={Profile} />\n          <Route exact path=\"/register\" component={Register} />\n          <Route exact path=\"/editprofile\" component={EditProfile} />\n          <Route exact path=\"/\" component={Login} />\n          {/* <Route exact path=\"*\" component={NullPath} /> */}\n        </Switch>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  DELETE_USER,\n  DELETE_USER_SUCCESS,\n  DELETE_USER_FAILURE,\n  GET_ANY_USER,\n  GET_ANY_USER_SUCCESS,\n  GET_ANY_USER_FAILURE,\n  GET_MESSAGES,\n  GET_MESSAGES_SUCCESS,\n  GET_MESSAGES_FAILURE,\n  GET_USER,\n  GET_USER_SUCCESS,\n  GET_USER_FAILURE,\n  LOGIN,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE,\n  LOGOUT,\n  LOGOUT_SUCCESS,\n  LOGOUT_FAILURE,\n  REGISTER,\n  REGISTER_SUCCESS,\n  REGISTER_FAILURE,\n  UPDATE_USER,\n  UPDATE_USER_SUCCESS,\n  UPDATE_USER_FAILURE,\n  UPDATE_MESSAGE_BY_ID_SUCCESS,\n\n  UPLOAD_USER_IMAGE,\n  UPLOAD_USER_IMAGE_SUCCESS,\n  UPLOAD_USER_IMAGE_FAIL,\n  DOWNLOAD_USER_IMAGE,\n  DOWNLOAD_USER_IMAGE_SUCCESS,\n  DOWNLOAD_USER_IMAGE_FAIL\n\n} from \"../Actions/actions\";\n\nconst initialState = {\n  authentication: {\n    loginAuthSuccess: false,\n    token: null,\n    id: \"\"\n  },\n  loggedInUser: {\n    id: 0,\n    username: \"\",\n    displayName: \"\",\n    about: \"\",\n    createdAt: \"\",\n    updatedAt: \"\",\n    messages: []\n  },\n \n  login: {},\n  loginResult: \"\",\n  messages: [],\n  register: {},\n  registerResult: \"\", \n  userId: null,\n  users: {}\n};\n\nconst kwitterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case DELETE_USER:\n      return state;\n    case DELETE_USER_FAILURE:\n      return state;\n    case DELETE_USER_SUCCESS:\n      return {\n        ...state,\n        initialState\n      };\n    case GET_ANY_USER:\n      return state;\n    case GET_ANY_USER_SUCCESS:\n      return {\n        ...state,\n        users: { ...state.users, [action.data.id]: action.data }\n      };\n    case GET_ANY_USER_FAILURE:\n      return state;\n    case GET_MESSAGES:\n      return state;\n    case GET_MESSAGES_FAILURE:\n      return state;\n    case GET_MESSAGES_SUCCESS:\n      return {\n        ...state,\n        messages: action.payload.messages\n      };\n    case GET_USER:\n      return state;\n    case GET_USER_SUCCESS:\n      return {\n        ...state,\n        loggedInUser: action.data\n      };\n    case GET_USER_FAILURE:\n      return state;\n    case LOGIN:\n      return state;\n    case LOGIN_FAILURE:\n      return {\n        ...state,\n        authentication: {\n          loginAuthSuccess: false\n        },\n        loginResult: action.result\n      };\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        authentication: {\n          loginAuthSuccess: true,\n          token: action.payload.token,\n          id: action.payload.id\n        },\n        login: action.login,\n        loginResult: action.result\n      };\n    case LOGOUT:\n      return state;\n    case LOGOUT_SUCCESS:\n      return {\n        ...state,\n        loggedInUser: initialState.loggedInUser,\n        authentication: initialState.authentication\n      };\n    case LOGOUT_FAILURE:\n      return state;\n    case REGISTER:\n      return state;  \n    case REGISTER_FAILURE:\n      return {\n        ...state,\n        registerResult: action.result\n      };\n    case REGISTER_SUCCESS:\n      return {\n        ...state,\n        register: action.register,\n        registerResult: action.result\n      };\n    case UPDATE_MESSAGE_BY_ID_SUCCESS:\n      const newMessages = state.messages.slice();\n      newMessages.splice(action.index, 1, action.message);\n      return {\n        ...state,\n        messages: newMessages\n      };\n    case UPDATE_USER:\n      return state;\n    case UPDATE_USER_SUCCESS:\n      return {\n        ...state,\n        loggedInUser: { ...state.loggedInUser, ...action.data }\n      };\n    case UPDATE_USER_FAILURE:\n      return state;\n\n      case UPLOAD_USER_IMAGE:\n      return { ...state };\n\n    case UPLOAD_USER_IMAGE_SUCCESS:\n      return { ...state, userImageTimestamp: action.userImageTimestamp };\n\n    case UPLOAD_USER_IMAGE_FAIL:\n      return { ...state };\n\n    case DOWNLOAD_USER_IMAGE:\n      return { ...state };\n\n    case DOWNLOAD_USER_IMAGE_SUCCESS:\n      return {\n        ...state,\n        loggedInUser: { \n          ...state.loggedInUser,\n          userImage: action.userImage\n        }\n      }\n\n    case DOWNLOAD_USER_IMAGE_FAIL:\n      return { ...state };\n\n\n    default:\n      return state;\n  }\n};\n\nexport default kwitterReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ConnectedRouter,\n  routerMiddleware,\n  connectRouter\n} from \"connected-react-router\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport kwitterReducer from \"./Reducers/reducer\";\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory({basename: process.env.PUBLIC_URL});\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  connectRouter(history)(kwitterReducer),\n  composeEnhancers(applyMiddleware(routerMiddleware(history), thunk))\n);\n\nconst Index = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>\n);\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/favicon.34f3b9ef.ico\";"],"sourceRoot":""}